<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title> To-Do List</title>
  <style>
    /* Styles same as before, with minor tweaks for new elements */
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: #030818;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
    .todo-container {
      background: #b390e1;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
      border-radius: 12px;
      width: 100%;
      max-width: 600px;
      padding: 25px;
      text-align: center;
    }
    .todo-header h1 {
      font-size: 28px;
      color: #333;
    }
    .todo-input-container,
    .todo-filters {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    .todo-filters input,
    .todo-filters select {
      padding: 10px;
      border-radius: 8px;
      border: 2px solid #5c89d6ac;
      flex-grow: 1;
    }
    .todo-actions button {
      margin-left: 8px;
      font-size: 15px;
      cursor: pointer;
    }
    .todo-item span.due-date {
      font-size: 0.9rem;
      color: #0f1d38;
      margin-left: 10px;
    }
    .todo-add-btn {
      background: linear-gradient(135deg, #4f2697, #a5152d);
      color: white;
      border: none;
      padding: 7px 24px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 15px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .todo-add-btn:hover {
      background: linear-gradient(135deg, #764ba2, #667eea);
      transform: scale(1.05);
      box-shadow: 0 8px 20px rgba(118, 75, 162, 0.8);
    }

    .todo-clear-btn {
      background: #ef4444;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
      margin-top: 15px;
      font-size: 16px;
      transition: background-color 0.3s ease;
    }
  </style>
</head>
<body>
  <div class="todo-container">
    <div class="todo-header">
      <h1>My To-Do List</h1>
    </div>
    <div class="todo-input-container">
      <input type="text" id="todo-input" class="todo-input" placeholder="What needs to be done?">
      <select id="category" class="todo-category">
        <option value="Work">Work</option>
        <option value="Personal">Personal</option>
        <option value="Shopping">Shopping</option>
      </select>
      <select id="priority" class="todo-priority">
        <option value="low">Low</option>
        <option value="medium">Medium</option>
        <option value="high">High</option>
      </select>
      <input type="date" id="due-date" class="todo-date">
      <button id="add-btn" class="todo-add-btn">Add Task</button>
    </div>
    <div class="todo-filters">
      <input type="text" id="search-bar" placeholder="Search tasks">
      <select id="sort-tasks">
        <option value="priority">Sort by Priority</option>
        <option value="due-date">Sort by Due Date</option>
      </select>
    </div>
    <ul id="todo-list" class="todo-list"></ul>
    <button id="clear-btn" class="todo-clear-btn">Clear All</button>
    <div class="task-counter" id="task-counter">Total Tasks: 0</div>
  </div>

  <script>
    const todoInput = document.getElementById('todo-input');
    const categorySelect = document.getElementById('category');
    const prioritySelect = document.getElementById('priority');
    const dueDateInput = document.getElementById('due-date');
    const addBtn = document.getElementById('add-btn');
    const clearBtn = document.getElementById('clear-btn');
    const todoList = document.getElementById('todo-list');
    const taskCounter = document.getElementById('task-counter');
    const searchBar = document.getElementById('search-bar');
    const sortTasks = document.getElementById('sort-tasks');

    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    const updateTaskCounter = () => {
      taskCounter.textContent = Total Tasks: ${tasks.length};
    };

    const saveTasks = () => {
      localStorage.setItem('tasks', JSON.stringify(tasks));
    };

    const renderTasks = (filter = '') => {
      todoList.innerHTML = '';
      const filteredTasks = tasks
        .filter(task => task.text.toLowerCase().includes(filter.toLowerCase()))
        .sort((a, b) => {
          if (sortTasks.value === 'priority') {
            const priorities = { high: 1, medium: 2, low: 3 };
            return priorities[a.priority] - priorities[b.priority];
          } else if (sortTasks.value === 'due-date') {
            return new Date(a.dueDate) - new Date(b.dueDate);
          }
          return 0;
        });

      filteredTasks.forEach((task, index) => {
        const listItem = document.createElement('li');
        listItem.className = 'todo-item';
        listItem.innerHTML = `
          <span>${task.text}</span>
          <span class="category">${task.category}</span>
          <span class="priority ${task.priority}">${task.priority.toUpperCase()}</span>
          <span class="due-date">${task.dueDate}</span>
          <div class="todo-actions">
            <button class="edit-btn">&#9998;</button>
            <button class="complete-btn">&#10003;</button>
            <button class="delete-btn">&#10005;</button>
          </div>
        `;

        const editBtn = listItem.querySelector('.edit-btn');
        const completeBtn = listItem.querySelector('.complete-btn');
        const deleteBtn = listItem.querySelector('.delete-btn');

        editBtn.addEventListener('click', () => {
          const newTask = prompt('Edit your task:', task.text);
          if (newTask) {
            tasks[index].text = newTask.trim();
            saveTasks();
            renderTasks(filter);
          }
        });

        completeBtn.addEventListener('click', () => {
          listItem.classList.toggle('completed');
        });

        deleteBtn.addEventListener('click', () => {
          tasks.splice(index, 1);
          saveTasks();
          renderTasks(filter);
        });

        todoList.appendChild(listItem);
      });

      updateTaskCounter();
    };

    const addTask = () => {
      const taskText = todoInput.value.trim();
      const category = categorySelect.value;
      const priority = prioritySelect.value;
      const dueDate = dueDateInput.value;

      if (!taskText) return;

      tasks.push({ text: taskText, category, priority, dueDate });
      saveTasks();
      renderTasks();
      todoInput.value = '';
      dueDateInput.value = '';
    };

    addBtn.addEventListener('click', addTask);

    clearBtn.addEventListener('click', () => {
      tasks = [];
      saveTasks();
      renderTasks();
    });

    searchBar.addEventListener('input', (e) => renderTasks(e.target.value));
    sortTasks.addEventListener('change', () => renderTasks(searchBar.value));

    renderTasks();
  </script>
</body>
</html>